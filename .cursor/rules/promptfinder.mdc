---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for PromptFinder

## 1. Code Consistency
- Use ES Modules (`import`/`export`) for all JavaScript.
- Follow the existing modular structure: keep UI, data, and utility logic separated.
- Use centralized text management for all user-facing strings (`js/text-constants.js`).

## 2. Accessibility
- All interactive elements must be accessible by keyboard and screen reader.
- Use appropriate ARIA roles, labels, and `aria-live` where dynamic content is updated.
- Ensure color contrast and focus states meet accessibility guidelines.

## 3. UI/UX
- Use `position: sticky` for headers that should remain visible during scroll.
- Keep the search field and prompt counter together in the sticky header.
- Ensure the UI is responsive and mobile-friendly.
- Use toast notifications for all user feedback (success, error, info).

## 4. Testing
- All new features must include or update Jest tests in `/tests`.
- Mock Firebase and DOM APIs as needed for unit tests.
- Run `npm run test` and `npm run lint` before every commit.

## 5. Documentation
- Update `README.md` and relevant docs for all major UI/UX or backend changes.
- Document accessibility and responsive design features.
- Keep the PRD and task files up to date as features progress.

## 6. Git Workflow
- Use clear, conventional commit messages (e.g., `feat(ui): ...`, `fix: ...`, `docs: ...`).
- Commit and push after all tests and lint checks pass.
- Reference task numbers or PRD sections in commit messages when relevant.

## 7. Deployment
- Only deploy to the Chrome Web Store after full review and testing.
- Use the build process (`npm run build`) to generate production assets.
- Announce new features in changelogs or release notes as appropriate.

## 8. General
- Remove debug scripts and visual aids before production commits.
- Use environment-appropriate CSP and avoid inline scripts in extension HTML.
- Keep all dependencies up to date using the provided update script.

